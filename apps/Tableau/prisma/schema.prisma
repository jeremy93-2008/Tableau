// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HistoryParam {
  id       String @id @default(cuid())
  name     String
  value    String
  history  History[]
}

model History {
  id        String   @id @default(cuid())
  messageCode   String
  messageParams HistoryParam[]
  createdAt DateTime @default(now())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  message   String
  createdAt DateTime @default(now())
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id     String @id @default(cuid())
  name   String
  color  String @default("#2C7A7B")
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Link {
  id     String @id @default(cuid())
  name   String
  url    String
  image  String
  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  createdAt DateTime @default(now())
  Users     User[]
  isRead    Boolean  @default(false)
  isNew     Boolean  @default(true)
}

model Checklist {
  id               String         @id @default(cuid())
  name             String
  checked          Boolean
  assignedUserId   String
  assignedUser     User           @relation(fields: [assignedUserId], references: [id], onDelete: Cascade)
  checklistGroupId String
  checklistGroup   ChecklistGroup @relation(fields: [checklistGroupId], references: [id], onDelete: Cascade)
}

model ChecklistGroup {
  id         String      @id @default(cuid())
  name       String
  checklists Checklist[]
  taskId     String
  task       Task        @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Task {
  id              String             @id @default(cuid())
  name            String
  description     String?
  status          StatusBoard        @relation(fields: [statusId], references: [id])
  statusId        String
  board           Board              @relation(fields: [boardId], references: [id])
  boardId         String
  user            User               @relation("User", fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  order           Int                @default(1)
  estimatedTime   Int?
  elapsedTime     Int?
  startDate       DateTime?
  endDate         DateTime?
  checklistsGroup ChecklistGroup[]
  link            Link[]
  assignedUsers   TaskAssignedUser[]
  tags            Tag[]
  Comment         Comment[]
  History         History[]
}

model Board {
  id               String             @id @default(cuid())
  name             String
  backgroundUrl    String
  description      String?
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  Task             Task[]
  Status           StatusBoard[]
  BoardUserSharing BoardUserSharing[]
}

model StatusBoard {
  id       String @id @default(cuid())
  order    Int    @default(1)
  statusId String
  status   Status @relation(fields: [statusId], references: [id], onDelete: Cascade)
  boardId  String
  board    Board  @relation(fields: [boardId], references: [id])
  task     Task[]
}

model Status {
  id          String        @id @default(cuid())
  name        String        @unique
  isDefault   Boolean?
  statusBoard StatusBoard[]
}

model BoardUserSharing {
  id             String  @id @default(cuid())
  boardId        String
  board          Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  userId         String
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  canEditContent Boolean // Can you edit Tasks
  canEditSchema  Boolean // Can you edit Columns and Board

  @@unique([boardId, userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TaskAssignedUser {
  id       String  @id @default(cuid())
  taskId   String
  userId   String
  Task     Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isHolder Boolean @default(false)

  @@unique([taskId, userId])
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  Task              Task[]             @relation("User")
  ChecklistAssigned Checklist[]
  Board             Board[]
  BoardUserSharing  BoardUserSharing[]
  isDarkMode        Boolean            @default(false)
  Notifications     Notification[]
  AssignedTasks     TaskAssignedUser[]
  Comment           Comment[]
  History           History[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
