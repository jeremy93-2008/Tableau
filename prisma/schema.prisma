// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id            String     @id @default(cuid())
  name          String
  description   String?
  status        StatusTask @relation(fields: [statusId], references: [id])
  statusId      String     @unique
  board         Board      @relation(fields: [boardId], references: [id])
  boardId       String     @unique
  userId        String     @unique
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  estimatedTime Int?
  elapsedTime   Int?
}

model Board {
  id            String      @id @default(cuid())
  name          String
  backgroundUrl String
  description   String?
  userId        String      @unique
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Task          Task?
  StatusTask    StatusTask?
}

model StatusTask {
  id       String @id @default(cuid())
  status   Status @relation(fields: [statusId], references: [id])
  statusId String @unique
  board    Board  @relation(fields: [boardId], references: [id])
  boardId  String @unique
  Task     Task?
}

model Status {
  id         String      @id @default(cuid())
  name       String
  isDefault  Boolean?
  StatusTask StatusTask?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Task          Task?
  Board         Board?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
